var documenterSearchIndex = {"docs":
[{"location":"api/eos/#Equations-of-state","page":"Equations of state","title":"Equations of state","text":"","category":"section"},{"location":"api/eos/","page":"Equations of state","title":"Equations of state","text":"Pages = [\"eos.md\"]","category":"page"},{"location":"api/eos/#Types","page":"Equations of state","title":"Types","text":"","category":"section"},{"location":"api/eos/","page":"Equations of state","title":"Equations of state","text":"Modules = [MultiComponentFlash]\nPages   = [\"eos.jl\", \"eos_types.jl\"]\nOrder   = [:type]\nPrivate = false","category":"page"},{"location":"api/eos/#MultiComponentFlash.GenericCubicEOS","page":"Equations of state","title":"MultiComponentFlash.GenericCubicEOS","text":"GenericCubicEOS(mixture, [type = PengRobinson()])\n\nInstantiate a generic cubic equation-of-state for a MultiComponentMixture and  a specified EOS.\n\nCurrently supported choices for type:\n\n1. `PengRobinson` (default)\n2. `ZudkevitchJoffe`\n3. `RedlichKwong`\n4. `SoaveRedlichKwong`\n\n\n\n\n\n","category":"type"},{"location":"api/eos/#MultiComponentFlash.GenericCubicEOS-2","page":"Equations of state","title":"MultiComponentFlash.GenericCubicEOS","text":"GenericCubicEOS is an implementation of generalized cubic equations of state.\n\nMany popular cubic equations can be written in a single form with a few changes in definitions for the terms (they are, after all, all cubic in form). References:\n\nCubic Equations of State-Which? by J.J. Martin\nSimulation of Gas Condensate Reservoir Performance  by K.H. Coats\n\n\n\n\n\n","category":"type"},{"location":"api/eos/#MultiComponentFlash.PengRobinson","page":"Equations of state","title":"MultiComponentFlash.PengRobinson","text":"Specializes the GenericCubicEOS to the Peng-Robinson cubic equation of state.\n\n\n\n\n\n","category":"type"},{"location":"api/eos/#MultiComponentFlash.RedlichKwong","page":"Equations of state","title":"MultiComponentFlash.RedlichKwong","text":"Specializes the GenericCubicEOS to the Redlich-Kwong cubic equation of state.\n\n\n\n\n\n","category":"type"},{"location":"api/eos/#MultiComponentFlash.SoaveRedlichKwong","page":"Equations of state","title":"MultiComponentFlash.SoaveRedlichKwong","text":"Specializes the GenericCubicEOS to the Soave-Redlich-Kwong cubic equation of state.\n\n\n\n\n\n","category":"type"},{"location":"api/eos/#MultiComponentFlash.ZudkevitchJoffe","page":"Equations of state","title":"MultiComponentFlash.ZudkevitchJoffe","text":"Specializes the GenericCubicEOS to the Zudkevitch-Joffe cubic equation of state.\n\nThe Zudkevitch-Joffe equations of state allows for per-component functions of  temperature that modify the weight_ai and weight_bi functions. These additional fitting parameters allows for more flexibility when matching complex mixtures.\n\n\n\n\n\n","category":"type"},{"location":"api/eos/#Functions","page":"Equations of state","title":"Functions","text":"","category":"section"},{"location":"api/eos/","page":"Equations of state","title":"Equations of state","text":"Modules = [MultiComponentFlash]\nPages   = [\"eos.jl\", \"eos_types.jl\"]\nOrder   = [:function]\nPrivate = false","category":"page"},{"location":"api/eos/#MultiComponentFlash.component_fugacity-Tuple{GenericCubicEOS, Vararg{Any, 5}}","page":"Equations of state","title":"MultiComponentFlash.component_fugacity","text":"component_fugacity(eos, cond, i, Z, forces, scalars)\n\nGet fugacity of component i in a phase with compressibility Z and EOS constants scalars.\n\n\n\n\n\n","category":"method"},{"location":"api/eos/#MultiComponentFlash.force_coefficients!-Tuple{Any, MultiComponentFlash.AbstractCubicEOS, Vararg{Any}}","page":"Equations of state","title":"MultiComponentFlash.force_coefficients!","text":"force_coefficients!(coeff, eos, cond)\n\nIn-place update of force coefficients.\n\nSee also force_coefficients\n\n\n\n\n\n","category":"method"},{"location":"api/eos/#MultiComponentFlash.force_coefficients-Tuple{MultiComponentFlash.AbstractCubicEOS, Any}","page":"Equations of state","title":"MultiComponentFlash.force_coefficients","text":"force_coefficients(eos, cond)\n\nGet coefficients for forces for a specific EOS (component interactions). For most cubics, these are a set of attractive (linear and quadratic) forces and a set of linear repulsive forces.\n\nNote that the current implementation of flash assumes that these are independent of the  compositions themselves.\n\nSee also force_coefficients!\n\n\n\n\n\n","category":"method"},{"location":"api/eos/#MultiComponentFlash.force_scalars-Tuple{MultiComponentFlash.AbstractCubicEOS, Any, Any}","page":"Equations of state","title":"MultiComponentFlash.force_scalars","text":"force_scalars(eos, cond, forces)\n\nCompute EOS specific scalars for the current conditions based on the forces.\n\n\n\n\n\n","category":"method"},{"location":"api/eos/#MultiComponentFlash.mixture_fugacities-Tuple{Any, Vararg{Any}}","page":"Equations of state","title":"MultiComponentFlash.mixture_fugacities","text":"Allocating version of mixture_fugacities!\n\n\n\n\n\n","category":"method"},{"location":"api/eos/#MultiComponentFlash.number_of_components-Tuple{MultiComponentFlash.AbstractEOS}","page":"Equations of state","title":"MultiComponentFlash.number_of_components","text":"number_of_components(eos)\n\nReturn number of components for the underlying mixture of the EOS.\n\n\n\n\n\n","category":"method"},{"location":"api/utilities/#Utilities","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"Pages = [\"utilities.md\"]","category":"page"},{"location":"api/utilities/#Partial-derivatives","page":"Utilities","title":"Partial derivatives","text":"","category":"section"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"note: Experimental features\nFunctions for obtaining partial derivatives of the flashed results. Please note that this is an experimental feature. Examples of usage are found in the unit tests.","category":"page"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"Modules = [MultiComponentFlash]\nPages   = [\"derivatives.jl\"]\nOrder   = [:type, :function]\nPrivate = false","category":"page"},{"location":"api/utilities/#MultiComponentFlash.inverse_flash_update!-NTuple{4, Any}","page":"Utilities","title":"MultiComponentFlash.inverse_flash_update!","text":"inverse_flash_update!(storage, eos, c, V)\n\nUpdate internal matrix of partial derivatives for a converged flash result.\n\n\n\n\n\n","category":"method"},{"location":"api/utilities/#MultiComponentFlash.set_partials-NTuple{5, Any}","page":"Utilities","title":"MultiComponentFlash.set_partials","text":"set_partials(v, storage, eos, c, index)\n\nModify a value v of ForwardDiff.Dual type to get the correct derivatives.\n\nIf the mixture is two-phase, the partial derivatives of phase molar fractions and vapor fraction with respect to the flash conditions (pressure, temperature and overall mole fractions) are not trivial. This function is the main gateway for setting these values.\n\nNotes\n\nExperimental interface, subject to change. You most likely want to use either set_partials_phase_mole_fractions! or set_partials_vapor_fraction\n\nIn order for this routine to work, the storage must be initialized using flash_storage with the following options enabled:\n\ninc_jac = true\ndiff_externals = true\n\nand inverse_flash_update! must be called after a successful flash. The partial derivatives with respect to p, T, z is then contained in storage.buf_inv with a negative sign. This function then performs the requisite chain rule operations for the input.\n\n\n\n\n\n","category":"method"},{"location":"api/utilities/#MultiComponentFlash.set_partials_phase_mole_fractions!","page":"Utilities","title":"MultiComponentFlash.set_partials_phase_mole_fractions!","text":"setpartialsphasemolefractions!(xy, storage, eos, ∂c, [phase_symbol])\n\nSet partial derivatives to phase mole fraction vector with type ForwardDiff.Dual with correct values, but missing partial derivatives.\n\n\n\n\n\n","category":"function"},{"location":"api/utilities/#MultiComponentFlash.set_partials_vapor_fraction-NTuple{4, Any}","page":"Utilities","title":"MultiComponentFlash.set_partials_vapor_fraction","text":"set_partials_vapor_fraction(V, storage, eos, ∂c)\n\nSet partial derivatives to a vapor mole fraction ForwardDiff.Dual instance with correct value, but missing partial derivatives.\n\n\n\n\n\n","category":"method"},{"location":"api/utilities/#Coupling-utilities","page":"Utilities","title":"Coupling utilities","text":"","category":"section"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"note: Experimental features\nUtilities for coupling flash to simulation codes. Please note that this is an experimental feature.","category":"page"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"Modules = [MultiComponentFlash]\nPages   = [\"flow_coupler.jl\"]\nOrder   = [:type, :function]\nPrivate = false","category":"page"},{"location":"api/utilities/#MultiComponentFlash.lbc_viscosities-Union{Tuple{T}, Tuple{Any, Any, Any, FlashedMixture2Phase{T, A} where A<:AbstractVector{T}}} where T","page":"Utilities","title":"MultiComponentFlash.lbc_viscosities","text":"lbc_viscosities(eos, p, T, flashed_mixture)\n\nCompute phase viscosities for a flashed two-phase mixture using the LBC correlation.\n\nAlways returns a named tuple of (μl, μv), even if the mixture is single-phase.\n\nThe value in the absent phase will be a tiny value (eps of the numeric type) to make division for mobilities etc. safe.\n\n\n\n\n\n","category":"method"},{"location":"api/utilities/#MultiComponentFlash.mass_densities-Union{Tuple{T}, Tuple{Any, Any, Any, FlashedMixture2Phase{T, A} where A<:AbstractVector{T}}} where T","page":"Utilities","title":"MultiComponentFlash.mass_densities","text":"mass_densities(eos, p, T, flashed_mixture)\n\nCompute mass densities for a flashed two-phase mixture.\n\nAlways returns a named tuple of (ρl, ρv), even if the mixture is single-phase.\n\nThe value in the absent phase will be zero.\n\n\n\n\n\n","category":"method"},{"location":"api/utilities/#MultiComponentFlash.mass_density-Union{Tuple{V}, Tuple{Any, Any, Any, FlashedPhase{V, A} where A<:AbstractVector{V}}} where V","page":"Utilities","title":"MultiComponentFlash.mass_density","text":"Compute mass density of a flashed phase\n\n\n\n\n\n","category":"method"},{"location":"api/utilities/#MultiComponentFlash.molar_volume-Tuple{Any, Any, Any, FlashedPhase}","page":"Utilities","title":"MultiComponentFlash.molar_volume","text":"Compute molar volume of a flashed phase\n\n\n\n\n\n","category":"method"},{"location":"api/utilities/#MultiComponentFlash.phase_is_present-Tuple{Any, PhaseState2Phase}","page":"Utilities","title":"MultiComponentFlash.phase_is_present","text":"phase_is_present(label, phase_state)\n\nCheck if a phase (symbol :liquid/:vapor) is present with the provided phase state.\n\n\n\n\n\n","category":"method"},{"location":"api/utilities/#MultiComponentFlash.phase_saturations-Union{Tuple{T}, Tuple{Any, Any, Any, FlashedMixture2Phase{T, A} where A<:AbstractVector{T}}} where T","page":"Utilities","title":"MultiComponentFlash.phase_saturations","text":"phase_saturations(eos, p, T, flashed_mixture)\n\nCompute phase saturations for a flashed two-phase mixture.\n\nAlways returns a named tuple of (Sl, Sv), even if the mixture is single-phase.\n\nThe value in the absent phase will be zero.\n\n\n\n\n\n","category":"method"},{"location":"api/utilities/#Various","page":"Utilities","title":"Various","text":"","category":"section"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"Modules = [MultiComponentFlash]\nPages   = [\"utils.jl\"]\nOrder   = [:type, :function]\nPrivate = false","category":"page"},{"location":"api/utilities/#MultiComponentFlash.lbc_viscosity-Union{Tuple{T}, Tuple{Any, Any, Any, FlashedPhase{T, A} where A<:AbstractVector{T}}} where T","page":"Utilities","title":"MultiComponentFlash.lbc_viscosity","text":"lbc_viscosity(eos, p, T, ph; <keyword arguments>)\n\nCompute the viscosity of a mixture using the Lohrenz-Bray-Clark correlation.\n\n\n\n\n\n","category":"method"},{"location":"api/utilities/#MultiComponentFlash.single_phase_label-Tuple{MultiComponentMixture, Any}","page":"Utilities","title":"MultiComponentFlash.single_phase_label","text":"single_phase_label(mixture, cond)\n\nLi's method for single-phase labeling of a mixture. Estimate of pure vapor/liquid.\n\nReturns a vapor fraction that is either 1.0 (=pure vapor) or 0.0 (=pure liquid).\n\n\n\n\n\n","category":"method"},{"location":"api/kvalues/#Equilibrium-constants","page":"Equilibrium constants","title":"Equilibrium constants","text":"","category":"section"},{"location":"api/kvalues/","page":"Equilibrium constants","title":"Equilibrium constants","text":"Pages = [\"kvalues.md\"]","category":"page"},{"location":"api/kvalues/","page":"Equilibrium constants","title":"Equilibrium constants","text":"Modules = [MultiComponentFlash]\nPages   = [\"rachford_rice.jl\", \"kvalues.jl\"]\nOrder   = [:type, :function]\nPrivate = false","category":"page"},{"location":"api/kvalues/#MultiComponentFlash.solve_rachford_rice","page":"Equilibrium constants","title":"MultiComponentFlash.solve_rachford_rice","text":"solve_rachford_rice(K, z, [V]; <keyword arguments>)\n\nCompute vapor mole fraction V for given equilibrium constants K and mole fractions z.\n\nArguments\n\nK - Equal length to z, containing the equilibrium constants for each component. z - Mole fractions. Should sum up to unity.\n\nKeyword arguments\n\ntol = 1e-12 - Tolerance for solve. maxiter - Maximum number of iterations ad - Use automatic differentiation (ForwardDiff) instead of analytical gradient.\n\nExamples\n\njulia> solve_rachford_rice([0.5, 1.5], [0.3, 0.7])\n0.8000000000000002\n\n\n\n\n\n","category":"function"},{"location":"api/kvalues/#MultiComponentFlash.initial_guess_K!-Tuple{Any, Any, Any}","page":"Equilibrium constants","title":"MultiComponentFlash.initial_guess_K!","text":"initial_guess_K(eos, cond)\n\nIn-place version of initial_guess_K.\n\n\n\n\n\n","category":"method"},{"location":"api/kvalues/#MultiComponentFlash.initial_guess_K-Tuple{Any, Any}","page":"Equilibrium constants","title":"MultiComponentFlash.initial_guess_K","text":"initial_guess_K(eos, cond)\n\nProduce a plausible initial guess for K values for eos under current cond.\n\n\n\n\n\n","category":"method"},{"location":"api/kvalues/#MultiComponentFlash.wilson_estimate!-Union{Tuple{R}, Tuple{AbstractVector{R}, Union{Tuple, AbstractVector}, R, R}} where R<:Real","page":"Equilibrium constants","title":"MultiComponentFlash.wilson_estimate!","text":"wilson_estimate!(K, properties, p, T)\n\nUpdate a vector K in-place with K-values from wilson_estimate.\n\n\n\n\n\n","category":"method"},{"location":"api/kvalues/#MultiComponentFlash.wilson_estimate-Tuple{Any, Any, Any}","page":"Equilibrium constants","title":"MultiComponentFlash.wilson_estimate","text":"wilson_estimate(properties, p, T)\n\nCreate vector of K-values that holds the wilson_estimate for each species.\n\n\n\n\n\n","category":"method"},{"location":"api/kvalues/#MultiComponentFlash.wilson_estimate-Union{Tuple{R}, NTuple{5, R}} where R<:Real","page":"Equilibrium constants","title":"MultiComponentFlash.wilson_estimate","text":"wilson_estimate(p, T, ω, p_c, T_c)\n\nEstimate K-values for a given acentric factor ω and pressure and temperature at current and critical conditions.\n\nReference Vapor-Liquid Equilibrium. XI. A New Expression for the Excess Free Energy of Mixing by GM Wilson\n\n\n\n\n\n","category":"method"},{"location":"api/flash/#Vapor-liquid-equilibrium-(flash)","page":"Vapor-liquid equilibrium (Flash)","title":"Vapor-liquid equilibrium (flash)","text":"","category":"section"},{"location":"api/flash/","page":"Vapor-liquid equilibrium (Flash)","title":"Vapor-liquid equilibrium (Flash)","text":"Pages = [\"flash.md\"]","category":"page"},{"location":"api/flash/#Stability-test","page":"Vapor-liquid equilibrium (Flash)","title":"Stability test","text":"","category":"section"},{"location":"api/flash/","page":"Vapor-liquid equilibrium (Flash)","title":"Vapor-liquid equilibrium (Flash)","text":"Modules = [MultiComponentFlash]\nPages   = [\"stability.jl\"]\nOrder   = [:type, :function]\nPrivate = false","category":"page"},{"location":"api/flash/#MultiComponentFlash.stability_2ph","page":"Vapor-liquid equilibrium (Flash)","title":"MultiComponentFlash.stability_2ph","text":"stability_2ph(eos, c, [K])\n\nDetermine if mixture is single-phase stable under conditions c.\n\nThis is done using a version of Michelsen's stability test.\n\nReference: The isothermal flash problem. Part I. Stability\n\n\n\n\n\n","category":"function"},{"location":"api/flash/#Two-phase-flash","page":"Vapor-liquid equilibrium (Flash)","title":"Two-phase flash","text":"","category":"section"},{"location":"api/flash/","page":"Vapor-liquid equilibrium (Flash)","title":"Vapor-liquid equilibrium (Flash)","text":"Modules = [MultiComponentFlash]\nPages   = [\"flash.jl\", \"flash_types.jl\"]\nOrder   = [:type, :function]\nPrivate = false","category":"page"},{"location":"api/flash/#MultiComponentFlash.flash_2ph!","page":"Vapor-liquid equilibrium (Flash)","title":"MultiComponentFlash.flash_2ph!","text":"flash_2ph!(storage, K, eos, c, [V]; <keyword arguments>)\n\nNon-allocating version of flash_2ph where storage is pre-allocated.\n\nUseful if you are performing many flashes of the same system with varying conditions.\n\nArguments\n\nstorage: Should be output from flash_storage(eos, c, method = method). Preallocated storage.\n\nRemaining arguments documented in flash_2ph.\n\nKeyword arguments\n\nupdate_forces = true: Update the p, T dependent forces in storage initially.\n\n\n\n\n\n","category":"function"},{"location":"api/flash/#MultiComponentFlash.flash_2ph-Union{Tuple{T}, Tuple{Any, T}, Tuple{Any, T, Any}} where T","page":"Vapor-liquid equilibrium (Flash)","title":"MultiComponentFlash.flash_2ph","text":"flash_2ph(eos, c, [K], [V]; <keyword arguments>)\n\nPerform two-phase flash with a given EOS under a set of specific conditions. Returns vapor fraction. Modifies K in-place.\n\nGiven a mixture with pressure, temperature and mole fractions, this routine performs a vapor-liquid equilibrium calculation after a stability test.\n\nTwo outcomes are possible:\n\nA single-phase condition prevails (returned vapor fraction is NaN) and a single phase (liquid or vapor) is stable.\nA two-phase condition is possible. The routine produces K-values and vapor fraction so that the following holds:\nIsofugacity constraint for all components (f_li = f_vi)\nMolar balance for all components ((1-V) x_i - V y_i - z_i)\nUnity condition (sum_i (x_i - y_i) = 0)\n\nArguments\n\neos: the equation-of-state to be used for the flash\nc: conditions to flash the mixture at on the form (p = 10e5, T = 303.15, z = [0.5, 0.3, 0.2])\nK: optionally a buffer of length number_of_components(eos) used to hold K-values. Modified in-place.\nV: optionally the initial guess for V. If this value is not NaN, the stability check will be skipped.\n\nKeyword arguments\n\nmethod = SSIFlash(): Flash method to use. Can be SSIFlash(), NewtonFlash() or SSINewtonFlash().\ntolerance = 1e-8: Tolerance for the convergence criterion. Relative to 1-R_i_infty where R_i = f_ilf_iv\nmaxiter = 20000: Maximum nubmer of iterations for both stability tests and the main flash.\nverbose = false: Emit extra information during solve.\nextra_out = false: Return (V, K, conv) where conv contains iterations and oncergence status instead of just V.\ncheck = true: Output warning (if not converged) and errors (if flash failed)\nz_min: Minimum composition (enforced if provided)\n\nSee also: flash_2ph!, single_phase_label\n\n\n\n\n\n","category":"method"},{"location":"api/flash/#MultiComponentFlash.flash_storage","page":"Vapor-liquid equilibrium (Flash)","title":"MultiComponentFlash.flash_storage","text":"flash_storage(eos, [c]; <keyword arguments>)\n\nPre-allocate storage for flash_2ph!.\n\nArguments\n\neos: the equation-of-state to be used for the flash\nc: conditions for the mixture. Types in conditions must match later usage (e.g. for use with ForwardDiff).\n\nKeyword arguments\n\nmethod = SSIFlash(): Flash method to use. Can be SSIFlash(), NewtonFlash() or SSINewtonFlash().\nstatic_size = false: Use SArrays and MArrays for fast flash, but slower compile times.\ninc_jac: Allocate storage for Newton/Jacobian. Required for Newton (and defaults to true for that method) or for diff_externals.\ndiff_externals = false: Allocate storage for matrix inversion required to produce partial derivatives of flash using set_partials.\n\nSee also: flash_2ph! set_partials\n\n\n\n\n\n","category":"function"},{"location":"api/flash/#MultiComponentFlash.liquid_mole_fraction-Tuple{Any, Any, Any}","page":"Vapor-liquid equilibrium (Flash)","title":"MultiComponentFlash.liquid_mole_fraction","text":"Compute liquid mole fraction from overall mole fraction, K-value and V vapor fraction\n\n\n\n\n\n","category":"method"},{"location":"api/flash/#MultiComponentFlash.vapor_mole_fraction-Tuple{Any, Any, Any}","page":"Vapor-liquid equilibrium (Flash)","title":"MultiComponentFlash.vapor_mole_fraction","text":"Compute vapor mole fraction from overall mole fraction, K-value and V vapor fraction\n\n\n\n\n\n","category":"method"},{"location":"api/flash/#MultiComponentFlash.vapor_mole_fraction-Tuple{Any, Any}","page":"Vapor-liquid equilibrium (Flash)","title":"MultiComponentFlash.vapor_mole_fraction","text":"Compute vapor mole fraction from liquid mole fraction and K-value\n\n\n\n\n\n","category":"method"},{"location":"api/flash/#MultiComponentFlash.NewtonFlash","page":"Vapor-liquid equilibrium (Flash)","title":"MultiComponentFlash.NewtonFlash","text":"NewtonFlash([dMax = 0.2])\n\nFlash using Newton's method for zero solve.\n\nOnly conditionally convergent, but has better convergence rate than SSI.\n\nArguments\n\ndMax: dampening factor for the newton iteration\n\nSee also: flash_2ph!, SSIFlash SSINewtonFlash\n\n\n\n\n\n","category":"type"},{"location":"api/flash/#MultiComponentFlash.SSIFlash","page":"Vapor-liquid equilibrium (Flash)","title":"MultiComponentFlash.SSIFlash","text":"Flash method that uses successive subtition.\n\nUnconditionally convergent, does not require derivatives, but is very slow around critical regions.\n\nSee also: flash_2ph!, NewtonFlash SSINewtonFlash\n\n\n\n\n\n","category":"type"},{"location":"api/flash/#MultiComponentFlash.SSINewtonFlash","page":"Vapor-liquid equilibrium (Flash)","title":"MultiComponentFlash.SSINewtonFlash","text":"SSINewtonFlash([swap_iter = 5,dMax = 0.2])\n\nPerform a number of SSI iterations, followed by Newton until convergence.\n\nSee also: flash_2ph!, SSIFlash NewtonFlash\n\n\n\n\n\n","category":"type"},{"location":"examples/advanced/#Advanced-usage","page":"Advanced usage","title":"Advanced usage","text":"","category":"section"},{"location":"examples/advanced/","page":"Advanced usage","title":"Advanced usage","text":"These are intended as more advanced examples for users who may want to use MultiComponentFlash as a part of another code, or get better performance by pre-allocating buffers. Please read Basic usage first.","category":"page"},{"location":"examples/advanced/#Avoiding-allocations","page":"Advanced usage","title":"Avoiding allocations","text":"","category":"section"},{"location":"examples/advanced/","page":"Advanced usage","title":"Advanced usage","text":"DocTestSetup = quote\n    using MultiComponentFlash\n    decane = MolecularProperty(\"n-Decane\")\n    methane = MolecularProperty(\"Methane\")\n    mixture = MultiComponentMixture((methane, decane))\n    eos = GenericCubicEOS(mixture, PengRobinson())\n    m = SSIFlash()\n    # Define conditions to flash at\n    p = 5e6        # 5 000 000 Pa, or 50 bar\n    T = 303.15     # 30 °C = 303.15 °K\n    z = [0.4, 0.6] # 1 mole methane per 9 moles of decane\n    conditions = (p = p, T = T, z = z)\n    # Perform a flash to get the vapor fraction\n    V, K, report = flash_2ph(eos, conditions, extra_out = true, method = m)\n\n    S = flash_storage(eos, conditions, method = m)\n    @allocated V = flash_2ph!(S, K, eos, conditions, method = m)\nend","category":"page"},{"location":"examples/advanced/","page":"Advanced usage","title":"Advanced usage","text":"If many flashes of the same mixture are to be performed at different conditions, you may want to pre-allocate the storage buffers for the flash:","category":"page"},{"location":"examples/advanced/","page":"Advanced usage","title":"Advanced usage","text":"m = SSIFlash()\nK = zeros(number_of_components(eos))\nS = flash_storage(eos, conditions, method = m)\n@allocated V = flash_2ph!(S, K, eos, conditions, method = m)\n\n# output\n\n16","category":"page"},{"location":"examples/advanced/","page":"Advanced usage","title":"Advanced usage","text":"See the unit tests for examples where the flash can use StaticArrays to avoid allocations entirely.","category":"page"},{"location":"examples/advanced/#Performance-example","page":"Advanced usage","title":"Performance example","text":"","category":"section"},{"location":"examples/advanced/","page":"Advanced usage","title":"Advanced usage","text":"The default interface is designed for ease-of-use with standard Julia types, but the module  also supports further by using StaticArrays:","category":"page"},{"location":"examples/advanced/","page":"Advanced usage","title":"Advanced usage","text":"using MultiComponentFlash, BenchmarkTools, StaticArrays\nfunction bench(m, static_size = false)\n    p = 6e6\n    T = 480.0\n    # Take the SPE5 benchmark\n    eos, data = cubic_benchmark(\"spe5\")\n    n = number_of_components(eos)\n    z = repeat([1/n], n)\n    conditions = (p = p, T = T, z = z)\n    S = flash_storage(eos, conditions, method = m, static_size = static_size)\n    K = initial_guess_K(eos, conditions)\n    if static_size\n        N = number_of_components(eos)\n        K = MVector{N}(K)\n    end\n    V, K, status = flash_2ph!(S, K, eos, conditions, NaN, method = m, extra_out = true)\n    println(\"V = $V (Completed in $(status.its) iterations)\")\n    @btime flash_2ph!($S, $K, $eos, $conditions, NaN, method = $m)\n    return nothing\nend\nprintln(\"SSI:\")\nbench(SSIFlash())\nprintln(\"SSI (static arrays):\")\nbench(SSIFlash(), true)\n##\nprintln(\"Newton:\")\nbench(NewtonFlash())\nprintln(\"Newton (static arrays):\")\nbench(NewtonFlash(), true)","category":"page"},{"location":"examples/advanced/","page":"Advanced usage","title":"Advanced usage","text":"The output will be a bit different on other CPUs, but this flash generally takes around 20 microseconds to complete, including both stability test and flash. ","category":"page"},{"location":"examples/advanced/","page":"Advanced usage","title":"Advanced usage","text":"SSI:\nV = 0.03279769425318795 (Completed in 14 iterations)\n  18.500 μs (0 allocations: 0 bytes)\nSSI (static arrays):\nV = 0.03279769425318795 (Completed in 14 iterations)\n  16.500 μs (0 allocations: 0 bytes)\n\nNewton:\nV = 0.032797694260046494 (Completed in 4 iterations)\n  20.100 μs (0 allocations: 0 bytes)\nNewton (static arrays):\nV = 0.032797694260046494 (Completed in 4 iterations)\n  19.900 μs (0 allocations: 0 bytes)","category":"page"},{"location":"examples/advanced/","page":"Advanced usage","title":"Advanced usage","text":"note: Use of `StaticArrays`\nSwitching to statically sized arrays can improve the speed, at the cost of longer compilation times. Please note that for StaticArrays there will be compilation that is dependent on the number of components in your mixture. For example, switching from a five to six component mixture will trigger a full recompilation of your chosen flash.","category":"page"},{"location":"examples/advanced/#Generate-and-plot-a-phase-diagram","page":"Advanced usage","title":"Generate and plot a phase diagram","text":"","category":"section"},{"location":"examples/advanced/","page":"Advanced usage","title":"Advanced usage","text":"We create a three-component mixture and flash for a range of pressure and temperature conditions:","category":"page"},{"location":"examples/advanced/","page":"Advanced usage","title":"Advanced usage","text":"using MultiComponentFlash, Plots\nns = 1000\nubar = 1e5\n# Pressure range\np0 = 1*ubar\np1 = 120*ubar\n# Temperature range\nT0 = 273.15 + 1\nT1 = 263.15 + 350\n# Define mixture + eos\nnames = [\"Methane\", \"CarbonDioxide\", \"n-Decane\"]\nprops = MolecularProperty.(names)\nmixture = MultiComponentMixture(props)\neos = GenericCubicEOS(mixture)\n# Constant mole fractions, vary p-T\nz = [0.3, 0.1, 0.6]\np  = range(p0, p1, length = ns)\nT = range(T0, T1, length = ns)\ncond = (p = p0, T = T0, z = z)\n\nm = SSIFlash()\nS = flash_storage(eos, cond, method = m)\nK = initial_guess_K(eos, cond)\ndata = zeros(ns, ns)\nfor ip = 1:ns\n    for iT = 1:ns\n        c = (p = p[ip], T = T[iT], z = z)\n        data[ip, iT] = flash_2ph!(S, K, eos, c, NaN, method = m)\n    end\nend\n\ncontour(p./ubar, T .- 273.15, data, levels = 10, fill=(true,cgrad(:hot)))\nylabel!(\"Pressure [Bar]\")\nxlabel!(\"T [°Celsius]\")","category":"page"},{"location":"examples/advanced/","page":"Advanced usage","title":"Advanced usage","text":"(Image: Phase diagram)","category":"page"},{"location":"examples/basics/#Basic-usage","page":"Basic usage","title":"Basic usage","text":"","category":"section"},{"location":"examples/basics/","page":"Basic usage","title":"Basic usage","text":"This section covers the basics of how to perform vapor-liquid flashes. For examples of how to get better performance, please see Advanced usage.","category":"page"},{"location":"examples/basics/#Vapor-liquid-equilibrium-for-constants","page":"Basic usage","title":"Vapor-liquid equilibrium for constants","text":"","category":"section"},{"location":"examples/basics/","page":"Basic usage","title":"Basic usage","text":"Many vapor-liquid problems can be solved under the assumption of equilibrium constants (K-values). If the K-values are independent of the phase mole fractions, the vapor fraction V can be determined by a solution of the Rachford-Rice equations. We define the standard relations for molar balance: z_i = V y_i + (1-V) x_i where z_i is the overall mole fraction of component i, y_i the vapor mole fraction of that same component and x_i the liquid fraction: x_i fracz_i(1 - V + V*K_i) quad y_i = K_i x_i.","category":"page"},{"location":"examples/basics/","page":"Basic usage","title":"Basic usage","text":"The Rachford-Rice reformulation of these equations is the natural choice for a numerical solution. For more details, the Wikipedia page on flash evaporation is a good starting point.","category":"page"},{"location":"examples/basics/","page":"Basic usage","title":"Basic usage","text":"We can demonstrate this by a binary system where the first component is light and easy to vaporize (it is found in the vapor phase 9 times out of 10) and the second is heavy (being found in the liquid phase 9 times out of 10). Let us define this mixturem, and take a 70-30 mixture in moles and perform a flash to find the vapor fraction V:","category":"page"},{"location":"examples/basics/","page":"Basic usage","title":"Basic usage","text":"using MultiComponentFlash\nK = [0.1, 9.0] # K-values\nz = [0.7, 0.3] # Mole fractions\nsolve_rachford_rice(K, z)\n\n# output\n\n0.24583333333333332","category":"page"},{"location":"examples/basics/","page":"Basic usage","title":"Basic usage","text":"The result indicates that we can expect to have about 3 moles of liquid per mole of vapor.","category":"page"},{"location":"examples/basics/#Two-phase-multicomponent-flash","page":"Basic usage","title":"Two-phase multicomponent flash","text":"","category":"section"},{"location":"examples/basics/","page":"Basic usage","title":"Basic usage","text":"For more complex mixtures, the assumption of constant K-values is not very accurate. We need to perform a full flash by defining a mixture together with an equation-of-state:","category":"page"},{"location":"examples/basics/","page":"Basic usage","title":"Basic usage","text":"using MultiComponentFlash\n# Define two species: One heavy and one light.\n# The heavy component uses table lookup:\ndecane = MolecularProperty(\"n-Decane\")\n# The light component is given with explicit properties\nmw = 0.0160428  # Molar mass (kg/mole)\nP_c = 4.5992e6  # Critical pressure (Pa)\nT_c = 190.564   # Critical temperature (°K)\nV_c = 9.4118e-5 # Critical volume (m^3/mole)\nω = 0.22394     # Acentric factor\nmethane = MolecularProperty(mw, P_c, T_c, V_c, ω)\n# or, equivialently,\n# methane = MolecularProperty(\"Methane\")\n# Create a mixture\nmixture = MultiComponentMixture((methane, decane))\neos = GenericCubicEOS(mixture, PengRobinson())\n# Define conditions to flash at\np = 5e6        # 5 000 000 Pa, or 50 bar\nT = 303.15     # 30 °C = 303.15 °K\nz = [0.4, 0.6] # 1 mole methane per 9 moles of decane\nconditions = (p = p, T = T, z = z)\n# Perform a flash to get the vapor fraction\nV = flash_2ph(eos, conditions)\n\n# output\n\n0.2660973082539686","category":"page"},{"location":"examples/basics/#K-values-and-fractions","page":"Basic usage","title":"K-values and fractions","text":"","category":"section"},{"location":"examples/basics/","page":"Basic usage","title":"Basic usage","text":"DocTestSetup = quote\n    using MultiComponentFlash\n    decane = MolecularProperty(\"n-Decane\")\n    methane = MolecularProperty(\"Methane\")\n    mixture = MultiComponentMixture((methane, decane))\n    eos = GenericCubicEOS(mixture, PengRobinson())\n    m = SSIFlash()\n    # Define conditions to flash at\n    p = 5e6        # 5 000 000 Pa, or 50 bar\n    T = 303.15     # 30 °C = 303.15 °K\n    z = [0.4, 0.6] # 1 mole methane per 9 moles of decane\n    conditions = (p = p, T = T, z = z)\n    # Perform a flash to get the vapor fraction\n    V, K, report = flash_2ph(eos, conditions, extra_out = true, method = m)\nend","category":"page"},{"location":"examples/basics/","page":"Basic usage","title":"Basic usage","text":"We can also get more output by turning on the extra_out flag. We can use this to examine the K-values (ratio between vapor and liquid mole fractions for each component):","category":"page"},{"location":"examples/basics/","page":"Basic usage","title":"Basic usage","text":"V, K, report = flash_2ph(eos, conditions, extra_out = true);\nK\n\n# output\n\n2-element Vector{Float64}:\n 4.12272462297378\n 0.00047115820615355295","category":"page"},{"location":"examples/basics/","page":"Basic usage","title":"Basic usage","text":"From the chosen overall mole fractions z, and the flashed K-values together with the vapor fraction V we can get the phase mole fractions in the liquid phase:","category":"page"},{"location":"examples/basics/","page":"Basic usage","title":"Basic usage","text":"julia> liquid_mole_fraction.(z, K, V)\n2-element Vector{Float64}:\n 0.24247146623483776\n 0.7575285337651623","category":"page"},{"location":"examples/basics/","page":"Basic usage","title":"Basic usage","text":"As expected, the liquid phase has more of the heavy component than in the overall mole fractions (0.75 relative to 0.6). If we compute the vapor fractions,","category":"page"},{"location":"examples/basics/","page":"Basic usage","title":"Basic usage","text":"julia> vapor_mole_fraction.(z, K, V)\n2-element Vector{Float64}:\n 0.9996430842149211\n 0.000356915785078925","category":"page"},{"location":"examples/basics/","page":"Basic usage","title":"Basic usage","text":"we see that the vapor phase is almost entirely made up of the lighter methane at the chosen conditions.","category":"page"},{"location":"examples/basics/#Switching-algorithms","page":"Basic usage","title":"Switching algorithms","text":"","category":"section"},{"location":"examples/basics/","page":"Basic usage","title":"Basic usage","text":"If we examine the third output, we can see output about number of iterations and a verification that the flash converged within the default tolerance:","category":"page"},{"location":"examples/basics/","page":"Basic usage","title":"Basic usage","text":"julia> report\n(its = 8, converged = true)","category":"page"},{"location":"examples/basics/","page":"Basic usage","title":"Basic usage","text":"The default method is the SSIFlash() method. The name is an abbreviation for successive-substitution, a simple but very robust method.","category":"page"},{"location":"examples/basics/","page":"Basic usage","title":"Basic usage","text":"We could alternatively switch to NewtonFlash() to use Newton's method with AD instead to reduce the number of iterations:","category":"page"},{"location":"examples/basics/","page":"Basic usage","title":"Basic usage","text":"julia> V, K, report = flash_2ph(eos, conditions, extra_out = true, method = NewtonFlash()); report\n(its = 5, converged = true)","category":"page"},{"location":"examples/basics/","page":"Basic usage","title":"Basic usage","text":"It is also possible to use SSINewtonFlash() that switches from SSI to Newton after a prescribed number of iterations, which is effective around the critical region where SSI has slow convergence.","category":"page"},{"location":"api/mixtures/#Mixtures","page":"Mixtures","title":"Mixtures","text":"","category":"section"},{"location":"api/mixtures/","page":"Mixtures","title":"Mixtures","text":"Pages = [\"mixtures.md\"]","category":"page"},{"location":"api/mixtures/","page":"Mixtures","title":"Mixtures","text":"Modules = [MultiComponentFlash]\nPages   = [\"mixtures.jl\", \"mixture_types.jl\"]\nOrder   = [:type, :function]\nPrivate = false","category":"page"},{"location":"api/mixtures/#MultiComponentFlash.acentric_factor-Union{Tuple{MolecularProperty{R}}, Tuple{R}} where R","page":"Mixtures","title":"MultiComponentFlash.acentric_factor","text":"Get the acentric factorfor a species.\n\n\n\n\n\n","category":"method"},{"location":"api/mixtures/#MultiComponentFlash.critical_pressure-Union{Tuple{MolecularProperty{R}}, Tuple{R}} where R","page":"Mixtures","title":"MultiComponentFlash.critical_pressure","text":"Get the critical pressure for a species.\n\n\n\n\n\n","category":"method"},{"location":"api/mixtures/#MultiComponentFlash.critical_temperature-Union{Tuple{MolecularProperty{R}}, Tuple{R}} where R","page":"Mixtures","title":"MultiComponentFlash.critical_temperature","text":"Get the critical temperature for a species.\n\n\n\n\n\n","category":"method"},{"location":"api/mixtures/#MultiComponentFlash.critical_volume-Union{Tuple{MolecularProperty{R}}, Tuple{R}} where R","page":"Mixtures","title":"MultiComponentFlash.critical_volume","text":"Get the critical volume for a species.\n\n\n\n\n\n","category":"method"},{"location":"api/mixtures/#MultiComponentFlash.molar_weight-Union{Tuple{MolecularProperty{R}}, Tuple{R}} where R","page":"Mixtures","title":"MultiComponentFlash.molar_weight","text":"Get the molar weight for a species.\n\n\n\n\n\n","category":"method"},{"location":"api/mixtures/#MultiComponentFlash.number_of_components-Union{Tuple{MultiComponentMixture{R, N}}, Tuple{N}, Tuple{R}} where {R, N}","page":"Mixtures","title":"MultiComponentFlash.number_of_components","text":"number_of_components(mixture)\n\nReturn number of components in the MultiComponentMixture.\n\n\n\n\n\n","category":"method"},{"location":"api/mixtures/#MultiComponentFlash.MolecularProperty","page":"Mixtures","title":"MultiComponentFlash.MolecularProperty","text":"MolecularProperty(molar_mass, p_crit, T_crit, V_crit, acentric_factor = 0.0)\n\nType that defines the static properties of a molecular species.\n\n\n\n\n\n","category":"type"},{"location":"api/mixtures/#MultiComponentFlash.MolecularProperty-Tuple{String}","page":"Mixtures","title":"MultiComponentFlash.MolecularProperty","text":"MolecularProperty(\"Name\")\n\nConvenience constructor that looks up molecular properties from a table in tabulated_properties.\n\nThe properties are taken from the wonderful MIT-licensed CoolProp. Please note that the equations of state included in this module may not be approprioate for all the available fluids, especially for mixtures!\n\nSee list of species at CoolProp website.\n\n\n\n\n\n","category":"method"},{"location":"api/mixtures/#MultiComponentFlash.MolecularProperty-Tuple{}","page":"Mixtures","title":"MultiComponentFlash.MolecularProperty","text":"MolecularProperty(; mw, p_c, T_c, V_c, acentric_factor = 0.0)\n\nKeyword constructor version of MolecularProperty. Except for the acentric factor, all properties must be specified. Explanation of inputs:\n\nmw: Molar mass (kg / mol) pc: Critical pressure (Pa) Tc: Critical temperature (°K) Vc: Critical volume (m^3 / mol) acentricfactor (dimensionless)\n\n\n\n\n\n","category":"method"},{"location":"api/mixtures/#MultiComponentFlash.MultiComponentMixture","page":"Mixtures","title":"MultiComponentFlash.MultiComponentMixture","text":"MultiComponentMixture(properties::NTuple{N, MolecularProperty}; A_ij = nothing, names = [\"C1\", \"C2\", ...], name = \"UnnamedMixture\")\n\nCreate a multicomponent mixture with an optional binary interaction coefficient matrix A_ij.\n\n\n\n\n\n","category":"type"},{"location":"#MultiComponentFlash-Manual","page":"Home","title":"MultiComponentFlash Manual","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = MultiComponentFlash","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for MultiComponentFlash.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package implements several equations of state for multicomponent vapor-liquid equilibrium, also called flash, for mixtures. These can be used to determine vapor fractions, molar partition between the phases and predict properties such as density and volume.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The following equations of state (EOS) are implemented as a class of generic cubics:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Peng-Robinson\nRedlich-Kwong\nSoave-Redlich-Kwong\nZudkevitch-Joffe","category":"page"},{"location":"","page":"Home","title":"Home","text":"The code is fully type stable, easy to use and fairly performant, with additional options to avoid allocations if you need to perform many flashes. The main implementation goal is to have a compact, performant and easy to use code suitable for integration in simulators of multiphase flow.","category":"page"},{"location":"#Highlights","page":"Home","title":"Highlights","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We highlight a few of the features. For more details, please see the API and the Basic usage examples.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Support for different solution methods (successive substition (SSI), Newton, SSI+Newton) and type dispatch makes it easy for users to add their own.\nUser friendly interface - with options to pre-allocate for increase performance.\nCompatible with AD. Mostly tested with ForwardDiff.\nPhase stability test.\nRachford-Rice for constant K-values.\nUseful utilities for molar density, molar volume, single-phase liquid-vapor estimation and Lohrenz-Bray-Clark viscosity correlations that are compatible with custom types and AD.","category":"page"},{"location":"","page":"Home","title":"Home","text":"There are also a few experimental features:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Experimental) Support for obtaining partial derivatives of mole and phase fractions from the flash for use in simulations.\n(Experimental) Types that make it easy to integrate phase flash inside a simulation (e.g. a reservoir or process simulator)","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you want to use the former features, please know that they might be subject to rapid change. Making contact via github or e-mail would be the best way to stay in the loop on these features.","category":"page"},{"location":"#Limitations-and-possible-improvements","page":"Home","title":"Limitations and possible improvements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The module currently only supports cubic equations of state. These are limited in accuracy for longer chains of molecules without extensive tuning for a specific mixture.\nFlash is limited to two-phase pressure-temperature (pT) flash.\nThe flash algorithms are limited to the basics - there are many strategies that could be implemented\nPeng-Robinson is the only equation of state that has been thoroughly validated.","category":"page"},{"location":"#Other-packages","page":"Home","title":"Other packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia packages:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Clapeyron.jl supports more advanced equations of state in addition to the cubics (SAFT-type and empirical EOS) and has a much larger API for thermodynamical properties. At the time of writing, this package does not support a full flash.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Julia interfaces to other useful packages:","category":"page"},{"location":"","page":"Home","title":"Home","text":"PyThermo.jl is an interface to the Thermo package.\nCoolProp.jl is an interface to the CoolProp library.","category":"page"},{"location":"#Contact","page":"Home","title":"Contact","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can use the Github webpage or drop me a line at Olav Møyner.","category":"page"}]
}
